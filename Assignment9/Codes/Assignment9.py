# -*- coding: utf-8 -*-
"""Assignment9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jhIVjXR--6eql_6nE-WWJNNE_dzekDfJ
"""

import numpy as np


def dir_vec(A,B):
  return B-A

def norm_vec(A,B):
  return np.matmul(omat, dir_vec(A,B))

#Generate line points
def line_gen(A,B):
  len =10
  dim = A.shape[0]
  x_AB = np.zeros((dim,len))
  lam_1 = np.linspace(0,1,len)
  for i in range(len):
    temp1 = A + lam_1[i]*(B-A)
    x_AB[:,i]= temp1.T
  return x_AB

#Generate line points
#def line_dir_pt(m,A,k1,k2):
#  len =10
#  x_AB = np.zeros((2,len))
#  lam_1 = np.linspace(k1,k2,len)
#  for i in range(len):
#    temp1 = A + lam_1[i]*m
#    x_AB[:,i]= temp1.T
#  return x_AB

def line_dir_pt(m,A, dim):
  len = 10
  dim = A.shape[0]
  x_AB = np.zeros((dim,len))
  lam_1 = np.linspace(0,10,len)
  for i in range(len):
    temp1 = A + lam_1[i]*m
    x_AB[:,i]= temp1.T
  return x_AB


#Generate line points
#def line_gen(A,B):
#  len =10
#  x_AB = np.zeros((2,len))
#  lam_1 = np.linspace(0,1,len)
#  for i in range(len):
#    temp1 = A + lam_1[i]*(B-A)
#    x_AB[:,i]= temp1.T
#  return x_AB

#Foot of the Altitude
def alt_foot(A,B,C):
  m = B-C
  n = np.matmul(omat,m) 
  N=np.vstack((m,n))
  p = np.zeros(2)
  p[0] = m@A 
  p[1] = n@B
  #Intersection
  P=np.linalg.inv(N.T)@p
  return P

#Radius and centre of the circumcircle
#of triangle ABC
def ccircle(A,B,C):
  p = np.zeros(2)
  n1 = dir_vec(B,A)
  p[0] = 0.5*(np.linalg.norm(A)**2-np.linalg.norm(B)**2)
  n2 = dir_vec(C,B)
  p[1] = 0.5*(np.linalg.norm(B)**2-np.linalg.norm(C)**2)
  #Intersection
  N=np.vstack((n1,n2))
  O=np.linalg.inv(N)@p
  r = np.linalg.norm(A -O)
  return O,r

#Radius and centre of the incircle
#of triangle ABC
def icentre(A,B,C,k1,k2):
  p = np.zeros(2)
  t = norm_vec(B,C)
  n1 = t/np.linalg.norm(t)
  t = norm_vec(C,A)
  n2 = t/np.linalg.norm(t)
  t = norm_vec(A,B)
  n3 = t/np.linalg.norm(t)
  p[0] = n1@B- k1*n2@C
  p[1] = n2@C- k2*n3@A
  N=np.vstack((n1-k1*n2,n2-k2*n3))
  I=np.matmul(np.linalg.inv(N),p)
  r = n1@(I-B)
  #Intersection
  return I,r

dvec = np.array([-1,1]) 
#Orthogonal matrix
omat = np.array([[0,1],[-1,0]])

#Code by K.A. Raja Babu
#June 14, 2021

import numpy as np
import matplotlib.pyplot as plt
from coeffs import * #referred from G.V.V sir's Code


#Path of bullet
x = np.linspace(0,22.76,23)
p=np.poly1d([-0.124,2.823,0])
for i in range(len(x)):
    y=p(x)

#Initial point of bullet
A=np.array([0,0])

#Initial point of plane
B=np.array([0,15])

#Generating and Plotting line AB
AB=line_gen(A,B)
plt.plot(AB[0,:],AB[1,:])

#Bullet and plane hitting point
C=np.array([8.449,15])

#Generating and Plotting line BC
BC=line_gen(B,C)
plt.plot(BC[0,:],BC[1,:])

#Generating and plotting vector v_b
V=np.array([2,5])
AV=line_gen(A,V)
plt.plot(AV[0,:],AV[1,:])
plt.annotate(s='', xy=(2,5), xytext=(2.3,6), arrowprops=dict(arrowstyle='<-'))

#Generating and plotting vector v_p
P=np.array([3,15])
BP=line_gen(B,P)
plt.plot(BP[0,:],BP[1,:])
plt.annotate(s='', xy=(0,15), xytext=(4,15), arrowprops=dict(arrowstyle='<-'))

#drawing arc
r=2
theta = np.linspace(1.230,1.570,50)
x1 = r*np.cos(theta)
y1 = r*np.sin(theta)
plt.plot(x1,y1)

#Plotting parabolic path of bullet
plt.plot(x,y,'--',label='Path of bullet')

#Labelling points
plt.plot(0,0,'o',label='Bullet Starting Pt.')
plt.text(-0.9,-0.3,'A')
plt.plot(0,15,'o',label='Plane Starting Pt.')
plt.text(-0.9,15.5,'B')
plt.plot(8.449,15,'o',label='Hitting Pt.')
plt.text(8.2,15.5,'C')
plt.plot(11.38,16,'o',label='Max. Height')
plt.text(11.2,16.2,'D')
plt.text(0.2,3,'$ \u03B8 $')
plt.text(2,4,'$v_b$')
plt.text(3,14,'$v_p$')

plt.xlabel('$Distance$')
plt.ylabel('$Height$')
plt.legend(loc='best')
plt.grid() # minor
plt.axis('equal')